import io.gatling.core.Predef._
import io.gatling.http.Predef._
import scala.concurrent.duration._

class gamechanger extends Simulation {
  {% if iterations is defined %}
  val iterations = Integer.getInteger("iterations", {{ iterations }}).toInt
  {% endif %}
  val concurrency = Integer.getInteger("concurrency", {{ concurrency }}).toInt
  val rampUp = Integer.getInteger("ramp-up", {{ ramp_up_time }}).toInt
  val httpProtocol = http
    .baseUrl("{{ base_url }}")
    {% for header in headers %}
    .header("{{ header.key }}", "{{ header.value }}")
    {% endfor %}

  val csvFeeder = csv("urls.csv").random

  val scn = scenario("Simulation")
    .feed(csvFeeder)
    {% if test_limiter == "iterations" %}
    .repeat(iterations)
    {% elif test_limiter == "duration" %}
    .forever()
    {% endif %}
    {
    exec(http("${url}").get("${url}"))
    }

  setUp(scn.inject(rampUsers(concurrency) during(rampUp)))
    .protocols(httpProtocol)
    {% if test_limiter == "duration" %}
    .maxDuration({{ max_duration }})
    {% endif %}
}
